from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from keyboards import quiz_menu, back_button, difficulty_keyboard
from questions import question_bank, Difficulty, Category, check_answer
from data import user_data
import logging
import asyncio
import random

router = Router()
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_quizzes = {}

@router.callback_query(F.data == "quiz")
async def quiz_menu_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    await callback.message.edit_text(
        "üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=quiz_menu()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("quiz:"))
async def quiz_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω"""
    quiz_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if quiz_type == "easy":
        await start_quiz(callback, Difficulty.EASY)
    elif quiz_type == "medium":
        await start_quiz(callback, Difficulty.MEDIUM)
    elif quiz_type == "hard":
        await start_quiz(callback, Difficulty.HARD)
    elif quiz_type == "random":
        difficulty = random.choice(list(Difficulty))
        await start_quiz(callback, difficulty)
    elif quiz_type == "speed":
        await start_speed_quiz(callback)
    elif quiz_type == "mixed":
        await start_mixed_quiz(callback)

    await callback.answer()

async def start_quiz(callback: CallbackQuery, difficulty: Difficulty):
    """–ù–∞—á–∞—Ç—å –æ–±—ã—á–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    question_data = question_bank.get_question(difficulty=difficulty)

    if not question_data:
        await callback.message.edit_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=back_button("quiz")
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    active_quizzes[user_id] = {
        "question": question_data,
        "start_time": asyncio.get_event_loop().time(),
        "type": "normal",
        "difficulty": difficulty
    }

    difficulty_emoji = {
        Difficulty.EASY: "üü¢",
        Difficulty.MEDIUM: "üü°",
        Difficulty.HARD: "üî¥"
    }

    difficulty_points = {
        Difficulty.EASY: 2,
        Difficulty.MEDIUM: 4,
        Difficulty.HARD: 6
    }

    quiz_text = f"""
üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>
{difficulty_emoji[difficulty]} <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty.name.title()}
üí∞ <b>–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {difficulty_points[difficulty]} –æ—á–∫–æ–≤

‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>
{question_data['q']}

‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...</i>
"""

    await callback.message.edit_text(quiz_text, reply_markup=back_button("quiz"))

async def start_speed_quiz(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ 60 —Å–µ–∫—É–Ω–¥)"""
    user_id = callback.from_user.id

    questions = []
    for _ in range(5):
        q = question_bank.get_question()
        questions.append(q)

    active_quizzes[user_id] = {
        "questions": questions,
        "current_question": 0,
        "correct_answers": 0,
        "start_time": asyncio.get_event_loop().time(),
        "type": "speed",
        "time_limit": 60
    }

    await show_speed_question(callback.message, user_id)

async def start_mixed_quiz(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —Å–º–µ—à–∞–Ω–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É (—Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    user_id = callback.from_user.id

    questions = []
    categories = list(Category)

    for _ in range(10):
        category = random.choice(categories)
        difficulty = random.choice(list(Difficulty))
        q = question_bank.get_question(category=category, difficulty=difficulty)
        questions.append(q)

    active_quizzes[user_id] = {
        "questions": questions,
        "current_question": 0,
        "correct_answers": 0,
        "start_time": asyncio.get_event_loop().time(),
        "type": "mixed"
    }

    await show_mixed_question(callback.message, user_id)

async def show_speed_question(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –±—ã—Å—Ç—Ä–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    quiz = active_quizzes.get(user_id)
    if not quiz:
        return

    current_q = quiz["current_question"]
    total_q = len(quiz["questions"])
    question = quiz["questions"][current_q]

    elapsed_time = asyncio.get_event_loop().time() - quiz["start_time"]
    remaining_time = max(0, quiz["time_limit"] - elapsed_time)

    if remaining_time <= 0:
        await finish_speed_quiz(message, user_id)
        return

    quiz_text = f"""
‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>
üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {current_q + 1}/{total_q}
‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {int(remaining_time)} —Å–µ–∫
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {quiz["correct_answers"]}

‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>
{question['q']}

‚úçÔ∏è <i>–ë—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ!</i>
"""

    await message.edit_text(quiz_text, reply_markup=back_button("quiz"))

async def show_mixed_question(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Å–º–µ—à–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    quiz = active_quizzes.get(user_id)
    if not quiz:
        return

    current_q = quiz["current_question"]
    total_q = len(quiz["questions"])
    question = quiz["questions"][current_q]

    difficulty_emoji = {
        Difficulty.EASY: "üü¢",
        Difficulty.MEDIUM: "üü°",
        Difficulty.HARD: "üî¥"
    }

    quiz_text = f"""
üé™ <b>–°–º–µ—à–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>
üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {current_q + 1}/{total_q}
{difficulty_emoji[question['difficulty']]} <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {question['difficulty'].name.title()}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {question['category'].value.title()}
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {quiz["correct_answers"]}

‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>
{question['q']}

‚úçÔ∏è <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...</i>
"""

    await message.edit_text(quiz_text, reply_markup=back_button("quiz"))

@router.message()
async def process_quiz_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user_id = message.from_user.id

    if user_id not in active_quizzes:
        return

    quiz = active_quizzes[user_id]
    user_answer = message.text.strip()

    if quiz["type"] == "normal":
        await process_normal_answer(message, user_id, user_answer)
    elif quiz["type"] == "speed":
        await process_speed_answer(message, user_id, user_answer)
    elif quiz["type"] == "mixed":
        await process_mixed_answer(message, user_id, user_answer)

async def process_normal_answer(message: Message, user_id: int, user_answer: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –æ–±—ã—á–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    quiz = active_quizzes[user_id]
    question = quiz["question"]
    difficulty = quiz["difficulty"]

    is_correct = check_answer(question, user_answer)

    # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
    points_map = {
        Difficulty.EASY: 2,
        Difficulty.MEDIUM: 4,
        Difficulty.HARD: 6
    }

    if is_correct:
        points = points_map[difficulty]
        await user_data.update_score(user_id, points)
        await user_data.update_stat(user_id, "correct", 1)
        await user_data.update_streak(user_id)

        result_text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>
üí∞ +{points} –æ—á–∫–æ–≤

üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>
{question.get('explanation', '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!')}
"""
    else:
        await user_data.update_score(user_id, -1)
        correct_answer = question['a'][0]

        result_text = f"""
‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>
üí∞ -1 –æ—á–∫–æ

‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {correct_answer}

üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>
{question.get('explanation', '–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è!')}
"""

    await user_data.update_stat(user_id, "answered", 1)

    # –£–¥–∞–ª—è–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    del active_quizzes[user_id]

    await message.answer(result_text, reply_markup=quiz_menu())

async def process_speed_answer(message: Message, user_id: int, user_answer: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –±—ã—Å—Ç—Ä–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    quiz = active_quizzes[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    elapsed_time = asyncio.get_event_loop().time() - quiz["start_time"]
    if elapsed_time > quiz["time_limit"]:
        await finish_speed_quiz(message, user_id)
        return

    question = quiz["questions"][quiz["current_question"]]
    is_correct = check_answer(question, user_answer)

    if is_correct:
        quiz["correct_answers"] += 1
        await user_data.update_score(user_id, 3)
        await user_data.update_stat(user_id, "correct", 1)
    else:
        await user_data.update_score(user_id, -1)

    await user_data.update_stat(user_id, "answered", 1)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    quiz["current_question"] += 1

    if quiz["current_question"] >= len(quiz["questions"]):
        await finish_speed_quiz(message, user_id)
    else:
        await show_speed_question(message, user_id)

async def process_mixed_answer(message: Message, user_id: int, user_answer: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–º–µ—à–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    quiz = active_quizzes[user_id]
    question = quiz["questions"][quiz["current_question"]]

    is_correct = check_answer(question, user_answer)

    # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    points_map = {
        Difficulty.EASY: 2,
        Difficulty.MEDIUM: 4,
        Difficulty.HARD: 6
    }

    if is_correct:
        points = points_map[question['difficulty']]
        quiz["correct_answers"] += 1
        await user_data.update_score(user_id, points)
        await user_data.update_stat(user_id, "correct", 1)
    else:
        await user_data.update_score(user_id, -1)

    await user_data.update_stat(user_id, "answered", 1)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    quiz["current_question"] += 1

    if quiz["current_question"] >= len(quiz["questions"]):
        await finish_mixed_quiz(message, user_id)
    else:
        await show_mixed_question(message, user_id)

async def finish_speed_quiz(message: Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    quiz = active_quizzes.get(user_id)
    if not quiz:
        return

    correct = quiz["correct_answers"]
    total = len(quiz["questions"])
    accuracy = (correct / total) * 100 if total > 0 else 0

    result_text = f"""
‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}
üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%
‚è±Ô∏è –í—Ä–µ–º—è: 60 —Å–µ–∫—É–Ω–¥

üèÜ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b>
"""

    await user_data.update_stat(user_id, "games_played", 1)
    del active_quizzes[user_id]

    await message.answer(result_text, reply_markup=quiz_menu())

async def finish_mixed_quiz(message: Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    quiz = active_quizzes.get(user_id)
    if not quiz:
        return

    correct = quiz["correct_answers"]
    total = len(quiz["questions"])
    accuracy = (correct / total) * 100 if total > 0 else 0

    result_text = f"""
üé™ <b>–°–º–µ—à–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}
üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%

üèÜ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>
"""

    await user_data.update_stat(user_id, "games_played", 1)
    del active_quizzes[user_id]

    await message.answer(result_text, reply_markup=quiz_menu())
