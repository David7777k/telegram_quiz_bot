from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import BaseFilter  # +++
from keyboards import quiz_menu, back_button
from data import user_data
from questions import question_bank, Difficulty, Category, check_answer
import logging
import random

router = Router()
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_questions = {}

# --------------------------------------------------------------------------- #
#                              –î–û–ë–ê–í–õ–ï–ù –§–ò–õ–¨–¢–†                                #
# --------------------------------------------------------------------------- #
class HasActiveQuiz(BaseFilter):
    """–§–∏–ª—å—Ç—Ä: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in user_questions
# --------------------------------------------------------------------------- #

@router.callback_query(F.data == "quiz")
async def quiz_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    await callback.message.edit_text(
        "üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=quiz_menu()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("quiz:"))
async def quiz_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    quiz_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–ø—Ä–æ—Å–∞
    category = None
    difficulty = None

    if quiz_type == "easy":
        difficulty = Difficulty.EASY
    elif quiz_type == "medium":
        difficulty = Difficulty.MEDIUM
    elif quiz_type == "hard":
        difficulty = Difficulty.HARD
    elif quiz_type == "random":
        difficulty = random.choice([Difficulty.EASY, Difficulty.MEDIUM, Difficulty.HARD])
    elif quiz_type == "speed":
        # –ë—ã—Å—Ç—Ä–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ - —Ç–æ–ª—å–∫–æ –ª–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        difficulty = Difficulty.EASY
    elif quiz_type == "mixed":
        # –°–º–µ—à–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ - —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        category = random.choice(list(Category))
        difficulty = random.choice([Difficulty.EASY, Difficulty.MEDIUM, Difficulty.HARD])

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
        question = question_bank.get_question(category, difficulty)
        user_questions[user_id] = question

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤–æ–ø—Ä–æ—Å
        points = get_question_points(question["difficulty"])

        question_text = f"""
üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>

üìù <b>–í–æ–ø—Ä–æ—Å:</b>
{question['q']}

üéØ <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {get_difficulty_name(question['difficulty'])}
üí∞ <b>–û—á–∫–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {points}

<i>–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</i>
"""

        await callback.message.edit_text(question_text, reply_markup=back_button("quiz"))
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=back_button("quiz")
        )
        await callback.answer()

# --------------------------------------------------------------------------- #
#            –û–ë–ù–û–í–õ–Å–ù –î–ï–ö–û–†–ê–¢–û–†: –î–û–ë–ê–í–õ–ï–ù –§–ò–õ–¨–¢–† HasActiveQuiz                #
# --------------------------------------------------------------------------- #
@router.message(HasActiveQuiz(), F.text)
async def handle_quiz_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª–µ–µ –Ω–µ –Ω—É–∂–Ω–∞ ‚Äì —Ñ–∏–ª—å—Ç—Ä –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    question = user_questions[user_id]
    user_answer = message.text.strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = check_answer(question, user_answer)
        points = get_question_points(question["difficulty"])

        if is_correct:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await user_data.update_stat(user_id, "answered", 1)
            await user_data.update_stat(user_id, "correct", 1)
            await user_data.update_score(user_id, points)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
            streak, streak_updated = await user_data.update_streak(user_id)

            streak_text = ""
            if streak_updated:
                streak_text = f"\nüî• <b>–°–µ—Ä–∏—è:</b> {streak}"

            response_text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

üí∞ <b>–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:</b> +{points}
{streak_text}

üìö <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>
{question.get('explanation', '–ú–æ–ª–æ–¥–µ—Ü!')}

–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
"""
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await user_data.update_stat(user_id, "answered", 1)
            await user_data.update_score(user_id, -1)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
            user_info = user_data.get_info(user_id)
            user_info["streak"] = 0
            await user_data.save()

            correct_answer = question["a"][0]
            response_text = f"""
‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

üí∞ <b>–ü–æ—Ç–µ—Ä—è–Ω–æ –æ—á–∫–æ–≤:</b> -1
üî• <b>–°–µ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞</b>

‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {correct_answer}

üìö <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>
{question.get('explanation', '–ò–∑—É—á–∞–π –±–æ–ª—å—à–µ!')}

–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!
"""

        # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏
        del user_questions[user_id]

        await message.answer(response_text, reply_markup=quiz_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=quiz_menu()
        )

def get_question_points(difficulty: Difficulty) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å"""
    if difficulty == Difficulty.EASY:
        return 2
    elif difficulty == Difficulty.MEDIUM:
        return 4
    elif difficulty == Difficulty.HARD:
        return 6
    return 2

def get_difficulty_name(difficulty: Difficulty) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    if difficulty == Difficulty.EASY:
        return "üü¢ –õ–µ–≥–∫–∏–π"
    elif difficulty == Difficulty.MEDIUM:
        return "üü° –°—Ä–µ–¥–Ω–∏–π"
    elif difficulty == Difficulty.HARD:
        return "üî¥ –°–ª–æ–∂–Ω—ã–π"
    return "üü¢ –õ–µ–≥–∫–∏–π"