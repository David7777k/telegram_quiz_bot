from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from keyboards import main_menu, help_keyboard, stats_keyboard, pagination_keyboard
from data import user_data
import logging
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = user_data.get_info(user_id)

    welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quiz Bot, {username}!</b>

üß† <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b> - –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
üé≤ <b>–ò–≥—Ä—ã</b> - —Ä–∞–∑–≤–ª–µ–∫–∏—Å—å —Å –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏  
üß© <b>–ó–∞–≥–∞–¥–∫–∏</b> - —Ä–∞–∑–≥–∞–¥–∞–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
üî§ <b>–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å
üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> - —Å–æ–±–∏—Ä–∞–π –Ω–∞–≥—Ä–∞–¥—ã

üí° <i>–û—Ç–≤–µ—á–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!</i>
"""

    await message.answer(welcome_text, reply_markup=main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/top - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤

<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
‚Ä¢ –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞–π –æ—á–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –°–æ–±–∏—Ä–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏

<b>–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:</b>
‚Ä¢ –õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: 2 –æ—á–∫–∞
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã: 4 –æ—á–∫–∞  
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: 6 –æ—á–∫–æ–≤
‚Ä¢ –ó–∞–≥–∞–¥–∫–∏: 3 –æ—á–∫–∞
‚Ä¢ –°–ª–æ–≤–∞: 5 –æ—á–∫–æ–≤
‚Ä¢ –ó–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: -1 –æ—á–∫–æ

<b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
–í—ã–ø–æ–ª–Ω—è–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π –æ—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!
"""

    await message.answer(help_text, reply_markup=help_keyboard())

@router.message(Command("stats"))
async def stats_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    await show_user_stats(message, message.from_user.id)

@router.message(Command("top"))
async def top_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
    await show_leaderboard(message)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "stats")
async def stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_stats(callback.message, callback.from_user.id, edit=True)
    await callback.answer()

@router.callback_query(F.data == "stats:detailed")
async def detailed_stats(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = user_data.get_info(callback.from_user.id)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    accuracy = 0
    if user_info["answered"] > 0:
        accuracy = (user_info["correct"] / user_info["answered"]) * 100

    avg_score_per_game = 0
    if user_info["games_played"] > 0:
        avg_score_per_game = user_info["score"] / user_info["games_played"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    level = calculate_user_level(user_info["score"])

    created_date = datetime.fromisoformat(user_info["created_at"]).strftime("%d.%m.%Y")

    detailed_text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë§ <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üéØ –£—Ä–æ–≤–µ–Ω—å: {level}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_date}
üèÜ –û–±—â–∏–π —Å—á–µ—Ç: {user_info['score']}

üé≤ <b>–ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚ùì –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {user_info['answered']}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_info['correct']}
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {user_info['answered'] - user_info['correct']}
üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%

üéÆ <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>
üß† –í–∏–∫—Ç–æ—Ä–∏–Ω—ã: {user_info.get('quiz_answered', 0)}
üß© –ó–∞–≥–∞–¥–∫–∏: {user_info['riddles_solved']}
üî§ –°–ª–æ–≤–∞: {user_info['words_guessed']}
üé≤ –ò–≥—Ä—ã: {user_info['games_played']}

üî• <b>–°–µ—Ä–∏–∏:</b>
‚ö° –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_info['streak']}
üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {user_info['max_streak']}

üìä <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
üí∞ –û—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É: {avg_score_per_game:.1f}
üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_info['achievements'])}
"""

    await callback.message.edit_text(detailed_text, reply_markup=stats_keyboard())
    await callback.answer()

@router.callback_query(F.data == "achievements")
async def show_achievements(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = user_data.get_info(callback.from_user.id)
    achievements = user_info["achievements"]

    if not achievements:
        text = """
üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>

üòî –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üéØ –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç - –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
üî• –°–µ—Ä–∏—è 3 - –æ—Ç–≤–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥
üî•üî• –°–µ—Ä–∏—è 7 - –æ—Ç–≤–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ 7 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
üî•üî•üî• –°–µ—Ä–∏—è 30 - –æ—Ç–≤–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ 30 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
üíØ 100 –æ—á–∫–æ–≤ - –Ω–∞–±–µ—Ä–∏ 100 –æ—á–∫–æ–≤
üèÜ 500 –æ—á–∫–æ–≤ - –Ω–∞–±–µ—Ä–∏ 500 –æ—á–∫–æ–≤
üëë 1000 –æ—á–∫–æ–≤ - –Ω–∞–±–µ—Ä–∏ 1000 –æ—á–∫–æ–≤
üß† –ú–∞—Å—Ç–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω - –æ—Ç–≤–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤
üß© –†–∞–∑–≥–∞–¥—á–∏–∫ –∑–∞–≥–∞–¥–æ–∫ - —Ä–µ—à–∏ 20 –∑–∞–≥–∞–¥–æ–∫
üìù –ß–µ–º–ø–∏–æ–Ω —Å–ª–æ–≤ - —É–≥–∞–¥–∞–π 10 —Å–ª–æ–≤

–ò–≥—Ä–∞–π –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!
"""
    else:
        text = f"""
üèÜ <b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({len(achievements)})</b>

"""
        for i, achievement in enumerate(achievements, 1):
            text += f"{i}. {achievement}\n"

        text += f"\nüéØ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {len(achievements)}/11 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"

    await callback.message.edit_text(text, reply_markup=main_menu())
    await callback.answer()

@router.callback_query(F.data == "leaderboard")
async def show_leaderboard_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"""
    await show_leaderboard(callback.message, edit=True)
    await callback.answer()

@router.callback_query(F.data.startswith("leaderboard:page:"))
async def leaderboard_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    page = int(callback.data.split(":")[-1])
    await show_leaderboard(callback.message, page=page, edit=True)
    await callback.answer()

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = """
‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>
1. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–±–∏—Ä–∞–π –æ—á–∫–∏
3. –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
4. –°–æ–±–∏—Ä–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

<b>–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:</b>
‚Ä¢ –õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: +2 –æ—á–∫–∞
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã: +4 –æ—á–∫–∞  
‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: +6 –æ—á–∫–æ–≤
‚Ä¢ –ó–∞–≥–∞–¥–∫–∏: +3 –æ—á–∫–∞
‚Ä¢ –£–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: +5 –æ—á–∫–æ–≤
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: -1 –æ—á–∫–æ

<b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò–≥—Ä–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–∏–∏
‚Ä¢ –ò–∑—É—á–∞–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
"""

    await callback.message.edit_text(help_text, reply_markup=help_keyboard())
    await callback.answer()

async def show_user_stats(message: Message, user_id: int, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = user_data.get_info(user_id)

    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
    accuracy = 0
    if user_info["answered"] > 0:
        accuracy = (user_info["correct"] / user_info["answered"]) * 100

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    level = calculate_user_level(user_info["score"])

    stats_text = f"""
üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}
üèÜ <b>–û—á–∫–∏:</b> {user_info['score']}
‚ùì <b>–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤:</b> {user_info['answered']}
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö:</b> {user_info['correct']}
üìà <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy:.1f}%

üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> {user_info['streak']}
üèÜ <b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> {user_info['max_streak']}

üéÆ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
üß© –ó–∞–≥–∞–¥–æ–∫ —Ä–µ—à–µ–Ω–æ: {user_info['riddles_solved']}
üî§ –°–ª–æ–≤ —É–≥–∞–¥–∞–Ω–æ: {user_info['words_guessed']}
üé≤ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_info['games_played']}

üèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:</b> {len(user_info['achievements'])}
"""

    if edit:
        await message.edit_text(stats_text, reply_markup=stats_keyboard())
    else:
        await message.answer(stats_text, reply_markup=stats_keyboard())

async def show_leaderboard(message: Message, page: int = 1, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"""
    leaderboard = user_data.get_leaderboard(50)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-50

    if not leaderboard:
        text = "üìä <b>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</b>\n\nüòî –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!"
        keyboard = main_menu()
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        items_per_page = 10
        total_pages = (len(leaderboard) - 1) // items_per_page + 1
        start_idx = (page - 1) * items_per_page
        end_idx = start_idx + items_per_page

        current_page_leaders = leaderboard[start_idx:end_idx]

        text = f"üìä <b>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</b>\n<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}</i>\n\n"

        for i, (user_id, user_info) in enumerate(current_page_leaders, start_idx + 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å –¥–ª—è —Ç–æ–ø-3
            medal = ""
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ user_id –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
            user_display = f"User{str(user_id)[:4]}***"
            accuracy = 0
            if user_info["answered"] > 0:
                accuracy = (user_info["correct"] / user_info["answered"]) * 100

            text += f"{medal}<b>{i}.</b> {user_display}\n"
            text += f"   üèÜ {user_info['score']} –æ—á–∫–æ–≤ | üìà {accuracy:.0f}% | üî• {user_info['max_streak']}\n\n"

        keyboard = pagination_keyboard(page, total_pages, "leaderboard")

    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

def calculate_user_level(score: int) -> int:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤"""
    if score < 50:
        return 1
    elif score < 150:
        return 2
    elif score < 300:
        return 3
    elif score < 500:
        return 4
    elif score < 800:
        return 5
    elif score < 1200:
        return 6
    elif score < 1700:
        return 7
    elif score < 2300:
        return 8
    elif score < 3000:
        return 9
    else:
        return 10

@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()