from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards import riddles_menu, back_button
from data import user_data
from questions import question_bank
import logging

router = Router()
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥–∞–¥–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_riddles = {}

@router.callback_query(F.data == "riddles")
async def riddles_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–≥–∞–¥–æ–∫"""
    await callback.message.edit_text(
        "üß© <b>–ó–∞–≥–∞–¥–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–≥–∞–¥–æ–∫:",
        reply_markup=riddles_menu()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("riddles:"))
async def riddle_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥–∞–¥–æ–∫"""
    riddle_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–∞–¥–∫—É
        riddle = question_bank.get_riddle(riddle_type)
        user_riddles[user_id] = riddle

        riddle_text = f"""
üß© <b>–ó–∞–≥–∞–¥–∫–∞</b>

‚ùì <b>–ó–∞–≥–∞–¥–∫–∞:</b>
{riddle['q']}

üí∞ <b>–û—á–∫–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> 3

<i>–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</i>
"""

        await callback.message.edit_text(riddle_text, reply_markup=back_button("riddles"))
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≥–∞–¥–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≥–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=back_button("riddles")
        )
        await callback.answer()

@router.message(F.text)
async def handle_riddle_answer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–≥–∞–¥–∫–∏"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥–∞–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_riddles:
        return

    riddle = user_riddles[user_id]
    user_answer = message.text.lower().strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        correct_answers = [ans.lower() for ans in riddle["a"]]
        is_correct = user_answer in correct_answers

        if is_correct:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            points = 3
            await user_data.update_score(user_id, points)
            await user_data.update_stat(user_id, "riddles_solved", 1)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
            streak, streak_updated = await user_data.update_streak(user_id)

            streak_text = ""
            if streak_updated:
                streak_text = f"\nüî• <b>–°–µ—Ä–∏—è:</b> {streak}"

            response_text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

üí∞ <b>–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:</b> +{points}
{streak_text}

üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—ã–ª–∞:</b> {riddle.get('hint', '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!')}

–•–æ—á–µ—à—å –µ—â–µ –∑–∞–≥–∞–¥–∫—É?
"""
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            hint_text = f"\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {riddle.get('hint', '–ü–æ–¥—É–º–∞–π –µ—â–µ!')}"

            response_text = f"""
‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>

{hint_text}

<i>–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∑–∞–≥–∞–¥–∫—É.</i>
"""

            # –ù–µ —É–¥–∞–ª—è–µ–º –∑–∞–≥–∞–¥–∫—É, –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
            await message.answer(response_text)
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–≥–∞–¥–∫—É –∏–∑ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        del user_riddles[user_id]

        await message.answer(response_text, reply_markup=riddles_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=riddles_menu()
        )

@router.callback_query(F.data == "riddle_hint")
async def show_riddle_hint(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ –∑–∞–≥–∞–¥–∫–µ"""
    user_id = callback.from_user.id

    if user_id not in user_riddles:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∑–∞–≥–∞–¥–∫—É!")
        return

    riddle = user_riddles[user_id]
    hint = riddle.get('hint', '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ—Ç')

    await callback.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}", show_alert=True)

@router.callback_query(F.data == "riddle_skip")
async def skip_riddle(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥–∞–¥–∫—É"""
    user_id = callback.from_user.id

    if user_id in user_riddles:
        riddle = user_riddles[user_id]
        correct_answer = riddle["a"][0]

        # –£–±–∏—Ä–∞–µ–º –æ—á–∫–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫
        await user_data.update_score(user_id, -1)

        del user_riddles[user_id]

        text = f"""
‚è≠Ô∏è <b>–ó–∞–≥–∞–¥–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞</b>

‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {correct_answer}
üí∞ <b>–ü–æ—Ç–µ—Ä—è–Ω–æ –æ—á–∫–æ–≤:</b> -1

üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> {riddle.get('hint', '–ò–∑—É—á–∞–π –±–æ–ª—å—à–µ!')}

–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –∑–∞–≥–∞–¥–∫—É!
"""

        await callback.message.edit_text(text, reply_markup=riddles_menu())

    await callback.answer()