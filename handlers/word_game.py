from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards import word_game_menu, back_button
from data import user_data
from questions import question_bank
import logging
import random

router = Router()
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_words = {}


def create_word_mask(word: str, guessed: set[str] = None) -> str:
    guessed = guessed or set()
    return "".join(letter if letter in guessed else "_" for letter in word)


def get_word_points(difficulty: str) -> int:
    # –ü—Ä–∏–º–µ—Ä: –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞
    return {"short": 5, "medium": 10, "long": 15, "hard": 20}.get(difficulty, 10)


def get_difficulty_name(difficulty: str) -> str:
    return {"short": "–õ–µ–≥–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "long": "–î–ª–∏–Ω–Ω—ã–π", "hard": "–°–ª–æ–∂–Ω—ã–π"}.get(difficulty, "–°—Ä–µ–¥–Ω–∏–π")


@router.callback_query(F.data == "word")
async def word_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞"""
    await callback.message.edit_text(
        "üî§ <b>–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ</b>\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=word_game_menu()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("word:"))
async def word_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞"""
    word_type = callback.data.split(":")[1]
    user_id = callback.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    difficulty = {
        "short": "short",
        "long": "long",
        "hard": "hard"
    }.get(word_type, random.choice(["short", "medium", "long"]))

    word = question_bank.get_word(difficulty).lower()
    masked = create_word_mask(word)
    points = get_word_points(difficulty)

    user_words[user_id] = {
        "word": word,
        "masked": masked,
        "guessed_letters": set(),
        "attempts": 6,
        "difficulty": difficulty,
        "points": points
    }

    text = (
        f"üî§ <b>–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ</b>\n\n"
        f"üéØ <b>–°–ª–æ–≤–æ:</b> {masked}\n"
        f"üìè <b>–î–ª–∏–Ω–∞:</b> {len(word)} –±—É–∫–≤\n"
        f"üéöÔ∏è <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {get_difficulty_name(difficulty)}\n"
        f"üí∞ <b>–û—á–∫–æ–≤ –∑–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ:</b> {points}\n"
        f"‚ù§Ô∏è <b>–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å:</b> 6\n\n"
        f"<i>–ù–∞–ø–∏—à–∏ –±—É–∫–≤—É –∏–ª–∏ —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ:</i>"
    )

    await callback.message.edit_text(text, reply_markup=back_button("word"))
    await callback.answer()


@router.message(F.text)
async def handle_word_guess(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤"""
    user_id = message.from_user.id
    guess = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if user_id not in user_words:
        return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã

    game = user_words[user_id]
    word = game["word"]
    guessed = game["guessed_letters"]
    attempts = game["attempts"]
    points = game["points"]

    response = ""

    # –ü–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
    if len(guess) > 1:
        if guess == word:
            response = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ <b>{word}</b> –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª <b>{points}</b> –æ—á–∫–æ–≤."
            user_data.add_points(user_id, points)
            del user_words[user_id]
        else:
            game["attempts"] -= 1
            if game["attempts"] <= 0:
                response = f"üí• –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{word}</b>."
                del user_words[user_id]
            else:
                response = (
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{game['attempts']}</b>\n"
                    f"–°–ª–æ–≤–æ: {game['masked']}"
                )

    # –ë—É–∫–≤–∞
    else:
        letter = guess
        if letter in guessed:
            response = f"‚ö†Ô∏è –ë—É–∫–≤–∞ <b>{letter}</b> —É–∂–µ –±—ã–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é."
        elif letter in word:
            guessed.add(letter)
            new_mask = create_word_mask(word, guessed)
            game["masked"] = new_mask
            if "_" not in new_mask:
                response = f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –±—É–∫–≤—ã: <b>{word}</b>. –ü–æ–ª—É—á–µ–Ω–æ <b>{points}</b> –æ—á–∫–æ–≤."
                user_data.add_points(user_id, points)
                del user_words[user_id]
            else:
                response = (
                    f"‚úÖ –ï—Å—Ç—å —Ç–∞–∫–∞—è –±—É–∫–≤–∞!\n"
                    f"–°–ª–æ–≤–æ: {new_mask}\n"
                    f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{attempts}</b>"
                )
        else:
            game["attempts"] -= 1
            if game["attempts"] <= 0:
                response = f"üí• –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{word}</b>."
                del user_words[user_id]
            else:
                response = (
                    f"‚ùå –ë—É–∫–≤—ã <b>{letter}</b> –Ω–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{game['attempts']}</b>\n"
                    f"–°–ª–æ–≤–æ: {game['masked']}"
                )

    await message.answer(response, reply_markup=back_button("word"))
