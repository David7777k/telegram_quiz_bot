from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import word_game_menu, back_button
from data import user_data
from questions import question_bank
import logging
import random

router = Router()
logger = logging.getLogger(__name__)


class WordState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã '–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ'."""
    guessing = State()



def create_word_mask(word: str, guessed: set[str] = None) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: –ª–∏–±–æ –±—É–∫–≤—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–≥–∞–¥–∞–Ω–∞, –ª–∏–±–æ '_'."""
    guessed = guessed or set()
    return [letter if letter in guessed else "_" for letter in word]


def get_word_points(difficulty: str) -> int:
    return {"short": 5, "medium": 10, "long": 15, "hard": 20}.get(difficulty, 10)


def get_difficulty_name(difficulty: str) -> str:
    return {"short": "–õ–µ–≥–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "long": "–î–ª–∏–Ω–Ω—ã–π", "hard": "–°–ª–æ–∂–Ω—ã–π"}.get(difficulty, "–°—Ä–µ–¥–Ω–∏–π")


def get_word_hint(word: str, difficulty: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    hints = {
        # ... (–≤–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–¥—Å–∫–∞–∑–æ–∫) ...
        "–∫–æ—Ç": "üê± –î–æ–º–∞—à–Ω–µ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—è—É–∫–∞–µ—Ç",
        "–ø–µ—Å": "üêï –î–æ–º–∞—à–Ω–∏–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ª–∞–µ—Ç",
        # –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∑–¥–µ—Å—å
    }
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default = f"üîç –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {get_difficulty_name(difficulty)})"
    return hints.get(word, default)


def get_category_hint(word: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤–∞."""
    categories = {
        "–∫–æ—Ç": "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "—Å–æ–±–∞–∫–∞": "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "—Å–ª–æ–Ω": "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
        "—Å—Ç–æ–ª": "–ú–µ–±–µ–ª—å", "—Å—Ç—É–ª": "–ú–µ–±–µ–ª—å", "–¥–∏–≤–∞–Ω": "–ú–µ–±–µ–ª—å",
        "–º–∞—à–∏–Ω–∞": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "—Å–∞–º–æ–ª–µ—Ç": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–≤–µ–ª–æ—Å–∏–ø–µ–¥": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "—Ç–µ–ª–µ—Ñ–æ–Ω": "–¢–µ—Ö–Ω–∏–∫–∞", "–∫–æ–º–ø—å—é—Ç–µ—Ä": "–¢–µ—Ö–Ω–∏–∫–∞", "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": "–¢–µ—Ö–Ω–∏–∫–∞",
        "—Å–æ–ª–Ω—Ü–µ": "–ü—Ä–∏—Ä–æ–¥–∞", "–º–æ—Ä–µ": "–ü—Ä–∏—Ä–æ–¥–∞", "–ª–µ—Å": "–ü—Ä–∏—Ä–æ–¥–∞",
        "–¥–æ–º": "–ú–µ—Å—Ç–∞", "—à–∫–æ–ª–∞": "–ú–µ—Å—Ç–∞", "–º–∞–≥–∞–∑–∏–Ω": "–ú–µ—Å—Ç–∞",
    }
    return categories.get(word, "–û–±—â–∏–µ —Å–ª–æ–≤–∞")


def show_letter_hint(word: str, guessed: set[str]) -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –ø–µ—Ä–≤–æ–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–æ–π."""
    if not guessed:
        return f"üî§ –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞: <b>{word[0].upper()}</b>"
    elif len(guessed) >= 3:
        return f"üî§ –ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞: <b>{word[-1].upper()}</b>"
    return ""


@router.callback_query(F.data == "word")
async def word_menu_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞."""
    logger.info("Opened word game menu")
    await callback.message.edit_text(
        "üî§ <b>–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ</b>\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=word_game_menu()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("word:"))
async def word_handler(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–π –∏–≥—Ä—ã: –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    logger.info(f"word_handler triggered with {callback.data}")
    word_type = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id

    difficulty = {
        "short": "short",
        "long": "long",
        "hard": "hard"
    }.get(word_type, random.choice(["short", "medium", "long"]))

    word = question_bank.get_word(difficulty).lower()
    points = get_word_points(difficulty)

    game = {
        "word": word,
        "guessed_letters": set(),
        "mask": create_word_mask(word),
        "attempts": 6,
        "difficulty": difficulty,
        "points": points,
        "hints_used": 0,
    }

    await state.set_state(WordState.guessing)
    await state.update_data(game=game)
    logger.info(f"Game started for user {user_id}: {word!r}")

    display_mask = " ".join(game["mask"])
    hint = get_word_hint(word, difficulty)
    category = get_category_hint(word)
    letter_hint = show_letter_hint(word, game["guessed_letters"])

    status = (
        f"üî§ <b>–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ</b>\n\n"
        f"üéØ –°–ª–æ–≤–æ: {display_mask}\n"
        f"üìù –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"{letter_hint}\n"
        f"‚ù§Ô∏è –ü–æ–ø—ã—Ç–æ–∫: {game['attempts']}\n"
        f"üí∞ –û—á–∫–æ–≤ –∑–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ: {points}\n\n"
        f"<i>–ù–∞–ø–∏—à–∏ –±—É–∫–≤—É –∏–ª–∏ —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ:</i>"
    )
    await callback.message.edit_text(status, reply_markup=back_button("word"))
    await callback.answer()


@router.message(StateFilter(WordState.guessing), F.text)
async def word_guess_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ–≥–¥–∞ –æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è."""
    user_id = message.from_user.id
    guess = message.text.strip().lower()
    logger.info(f"User {user_id} guessed: {guess!r}")

    data = await state.get_data()
    game = data.get("game")
    if not game:
        await state.clear()
        return

    word = game["word"]
    guessed = game["guessed_letters"]
    attempts = game["attempts"]
    points = game["points"]

    response = ""

    if guess in ("–ø–æ–¥—Å–∫–∞–∑–∫–∞", "?"):
        hints_used = game.get("hints_used", 0)
        if hints_used < 2:
            game["hints_used"] = hints_used + 1
            vowels = set("–∞–µ–∏–æ—É—ã—ç—é—è")
            vowels_in_word = [v for v in word if v in vowels]
            if vowels_in_word:
                guessed.update(vowels_in_word)
                mask = create_word_mask(word, guessed)
                game["mask"] = mask
                game["guessed_letters"] = guessed
                response = f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã! (–æ—Å—Ç–∞–ª–æ—Å—å {2 - game['hints_used']} –ø–æ–¥—Å–∫–∞–∑–æ–∫)"
                await state.update_data(game=game)
            else:
                response = "üí° –í —ç—Ç–æ–º —Å–ª–æ–≤–µ –Ω–µ—Ç –≥–ª–∞—Å–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"
        else:
            response = "‚ö†Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"

    elif len(guess) > 1:
        if guess == word:
            bonus = points // 2 if game.get("hints_used", 0) == 0 else 0
            total = points + bonus
            bonus_text = f" (+{bonus} –±–æ–Ω—É—Å!)" if bonus > 0 else ""
            response = f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë—ã–ª–æ —Å–ª–æ–≤–æ <b>{word}</b>. +{total} –æ—á–∫–æ–≤{bonus_text}."
            await user_data.update_score(user_id, total)
            await user_data.update_stat(user_id, "words_guessed", 1)
            await state.clear()
        else:
            attempts -= 1
            game["attempts"] = attempts
            if attempts <= 0:
                response = f"üí• –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{word}</b>."
                await state.clear()
            else:
                response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å {attempts} –ø–æ–ø—ã—Ç–æ–∫."
                await state.update_data(game=game)

    else:
        letter = guess
        if letter in guessed:
            response = f"‚ö†Ô∏è –ë—É–∫–≤–∞ <b>{letter}</b> —É–∂–µ –±—ã–ª–∞."
        else:
            guessed.add(letter)
            if letter in word:
                mask = create_word_mask(word, guessed)
                game["mask"] = mask
                if "_" not in mask:
                    bonus = points // 2 if game.get("hints_used", 0) == 0 else 0
                    total = points + bonus
                    bonus_text = f" (+{bonus} –±–æ–Ω—É—Å!)" if bonus > 0 else ""
                    response = f"üéâ –ú–æ–ª–æ–¥–µ—Ü! –°–ª–æ–≤–æ <b>{word}</b> –æ—Ç–≥–∞–¥–∞–Ω–æ! +{total} –æ—á–∫–æ–≤{bonus_text}."
                    await user_data.update_score(user_id, total)
                    await user_data.update_stat(user_id, "words_guessed", 1)
                    await state.clear()
                else:
                    count = word.count(letter)
                    response = f"‚úÖ –ï—Å—Ç—å –±—É–∫–≤–∞ <b>{letter}</b>! (–æ—Ç–∫—Ä—ã—Ç–æ {count} –±—É–∫–≤)"
                    game["guessed_letters"] = guessed
                    await state.update_data(game=game)
            else:
                attempts -= 1
                game["attempts"] = attempts
                game["guessed_letters"] = guessed
                if attempts <= 0:
                    response = f"üí• –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{word}</b>."
                    await state.clear()
                else:
                    response = f"‚ùå –ù–µ—Ç –±—É–∫–≤—ã <b>{letter}</b>, –æ—Å—Ç–∞–ª–æ—Å—å {attempts} –ø–æ–ø—ã—Ç–æ–∫."
                    await state.update_data(game=game)

    if await state.get_state() == WordState.guessing:
        display_mask = " ".join(game["mask"])
        wrong = [l for l in game["guessed_letters"] if l not in word]
        display_wrong = ", ".join(sorted(wrong)) or "‚Äî"
        hint = get_word_hint(word, game["difficulty"])
        category = get_category_hint(word)
        letter_hint = show_letter_hint(word, game["guessed_letters"])
        guessed_count = len([c for c in word if c in game["guessed_letters"]])

        status = (
            f"üî§ <b>–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ</b>\n\n"
            f"üéØ –°–ª–æ–≤–æ: {display_mask}\n"
            f"üìù –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"{letter_hint}\n"
            f"üìä –û—Ç–≥–∞–¥–∞–Ω–æ –±—É–∫–≤: {guessed_count}/{len(set(word))}\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {', '.join(sorted([l for l in game['guessed_letters'] if l in word])) or '‚Äî'}\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {display_wrong}\n"
            f"‚ù§Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game['attempts']}\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {2 - game.get('hints_used', 0)}\n\n"
            f"<i>–ù–∞–ø–∏—à–∏ –±—É–∫–≤—É, —Å–ª–æ–≤–æ –∏–ª–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞':</i>\n"
        )
    else:
        status = ""

    await message.answer(status + response, reply_markup=back_button("word"))
    logger.info(f"Sent to {user_id}: {status + response}")
