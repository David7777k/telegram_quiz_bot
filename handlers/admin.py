import os
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from data import user_data

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
admin_ids_str = os.getenv("ADMIN_IDS", "")
if admin_ids_str.strip():
    ADMIN_IDS = set(map(int, admin_ids_str.split(',')))
else:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞—à Telegram ID
    ADMIN_IDS = {1009310689}

router = Router()
logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
class AdminStates(StatesGroup):
    waiting_user_id_grant = State()
    waiting_points_grant = State()
    waiting_user_id_reset = State()
    waiting_user_id_fullaccess = State()

class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        is_admin = message.from_user.id in ADMIN_IDS
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {is_admin}")
        return is_admin

def get_admin_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –æ—á–∫–∏", callback_data="admin_grant_points"),
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_reset_user")
        ],
        [
            InlineKeyboardButton(text="üîë –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="admin_full_access"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_list"),
            InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="admin_system_info")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="admin_close")
        ]
    ])
    return keyboard

def get_back_menu():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
    ])

def get_confirmation_menu(action_data: str):
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action_data}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
        ]
    ])

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@router.message(IsAdmin(), F.text == '/test_admin')
async def test_admin(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞"""
    await message.answer(f"‚úÖ –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–∞—é—Ç! –í–∞—à ID: {message.from_user.id}")

@router.message(IsAdmin(), F.text.in_(['/admin', '/panel']))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    admin_text = """
üîß <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b> üîß

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üí∞ <b>–í—ã–¥–∞—Ç—å –æ—á–∫–∏</b> - –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
üîÑ <b>–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b> - –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üîë <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
üîß <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>
    """

    await message.answer(
        admin_text,
        reply_markup=get_admin_menu(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_menu")
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é"""
    admin_text = """
üîß <b>–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b> üîß

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üí∞ <b>–í—ã–¥–∞—Ç—å –æ—á–∫–∏</b> - –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
üîÑ <b>–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b> - –æ–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üîë <b>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</b> - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
üîß <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>
    """

    await callback.message.edit_text(
        admin_text,
        reply_markup=get_admin_menu(),
        parse_mode='HTML'
    )

@router.callback_query(F.data == "admin_grant_points")
async def start_grant_points(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –æ—á–∫–æ–≤"""
    await state.set_state(AdminStates.waiting_user_id_grant)

    text = """
üí∞ <b>–í–´–î–ê–ß–ê –û–ß–ö–û–í</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏:

<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>

‚ùóÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel
    """

    await callback.message.edit_text(
        text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

@router.message(AdminStates.waiting_user_id_grant, IsAdmin())
async def process_user_id_grant(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –æ—á–∫–æ–≤"""
    if message.text == '/cancel':
        await state.clear()
        return await admin_panel(message)

    try:
        user_id = int(message.text.strip())
        await state.update_data(user_id=user_id)
        await state.set_state(AdminStates.waiting_points_grant)

        text = f"""
üí∞ <b>–í–´–î–ê–ß–ê –û–ß–ö–û–í</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:

<i>–ü—Ä–∏–º–µ—Ä: 100</i>
<i>–î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: -50</i>

‚ùóÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel
        """

        await message.answer(text, parse_mode='HTML')

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )

@router.message(AdminStates.waiting_points_grant, IsAdmin())
async def process_points_grant(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏"""
    if message.text == '/cancel':
        await state.clear()
        return await admin_panel(message)

    try:
        points = int(message.text.strip())
        data = await state.get_data()
        user_id = data['user_id']

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        text = f"""
üí∞ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–î–ê–ß–ò –û–ß–ö–û–í</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>
–û—á–∫–∏: <b>{points:+}</b>

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        await state.update_data(points=points)
        await message.answer(
            text,
            reply_markup=get_confirmation_menu(f"grant_{user_id}_{points}"),
            parse_mode='HTML'
        )

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º):"
        )

@router.callback_query(F.data.startswith("confirm_grant_"))
async def confirm_grant_points(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É –æ—á–∫–æ–≤"""
    try:
        data = await state.get_data()
        user_id = data['user_id']
        points = data['points']

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = user_data.ensure_user(user_id)
        old_score = user_info.get('score', 0)

        await user_data.update_score(user_id, points)
        new_score = old_score + points

        success_text = f"""
‚úÖ <b>–û–ß–ö–ò –£–°–ü–ï–®–ù–û –ù–ê–ß–ò–°–õ–ï–ù–´</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>
–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>{points:+}</b> –æ—á–∫–æ–≤
–ë—ã–ª–æ: <b>{old_score}</b> –æ—á–∫–æ–≤
–°—Ç–∞–ª–æ: <b>{new_score}</b> –æ—á–∫–æ–≤

–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
        """

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

        await state.clear()
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∏—Å–ª–∏–ª {points} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –æ—á–∫–æ–≤: {e}')
        await callback.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        await state.clear()

@router.callback_query(F.data == "admin_reset_user")
async def start_reset_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(AdminStates.waiting_user_id_reset)

    text = """
üîÑ <b>–°–ë–†–û–° –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å:

<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∏—Ç:
‚Ä¢ –û—á–∫–∏ (score)
‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (answered)
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (correct)
‚Ä¢ –ò–≥—Ä—ã (games_played)
‚Ä¢ –ó–∞–≥–∞–¥–∫–∏ (riddles_solved)
‚Ä¢ –£–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (words_guessed)
‚Ä¢ –¢–µ–∫—É—â—É—é —Å–µ—Ä–∏—é (streak)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–µ—Ä–∏—é (max_streak)
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (achievements)

‚ùóÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel
    """

    await callback.message.edit_text(
        text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

@router.message(AdminStates.waiting_user_id_reset, IsAdmin())
async def process_reset_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == '/cancel':
        await state.clear()
        return await admin_panel(message)

    try:
        user_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_info = user_data.ensure_user(user_id)

        text = f"""
üîÑ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–ë–†–û–°–ê –î–ê–ù–ù–´–•</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>
–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: <b>{user_info.get('score', 0)}</b>
–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: <b>{user_info.get('games_played', 0)}</b>

‚ö†Ô∏è <b>–í–°–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´!</b>

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        await state.update_data(user_id=user_id)
        await message.answer(
            text,
            reply_markup=get_confirmation_menu(f"reset_{user_id}"),
            parse_mode='HTML'
        )

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )

@router.callback_query(F.data.startswith("confirm_reset_"))
async def confirm_reset_user(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await state.get_data()
        user_id = data['user_id']

        user_info = user_data.ensure_user(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        old_data = {
            'score': user_info.get('score', 0),
            'games_played': user_info.get('games_played', 0),
            'achievements_count': len(user_info.get('achievements', []))
        }

        # –û–±–Ω—É–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        reset_fields = ['score', 'answered', 'correct', 'games_played',
                        'riddles_solved', 'words_guessed', 'streak', 'max_streak']

        for field in reset_fields:
            user_info[field] = 0
        user_info['achievements'] = []

        await user_data.save()

        success_text = f"""
‚úÖ <b>–î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–ë–†–û–®–ï–ù–´</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>

<b>–°–±—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –û—á–∫–∏: <s>{old_data['score']}</s> ‚Üí 0
‚Ä¢ –ò–≥—Ä—ã: <s>{old_data['games_played']}</s> ‚Üí 0
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: <s>{old_data['achievements_count']}</s> ‚Üí 0

–í—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã!
        """

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

        await state.clear()
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —Å–±—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}')
        await callback.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        await state.clear()

@router.callback_query(F.data == "admin_full_access")
async def start_full_access(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    await state.set_state(AdminStates.waiting_user_id_fullaccess)

    text = """
üîë <b>–ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ò–ï –ü–û–õ–ù–û–ì–û –î–û–°–¢–£–ü–ê</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞:

<i>–ü—Ä–∏–º–µ—Ä: 123456789</i>

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ

‚ùóÔ∏è –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel
    """

    await callback.message.edit_text(
        text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

@router.message(AdminStates.waiting_user_id_fullaccess, IsAdmin())
async def process_full_access(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–¥–∞—á—É –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    if message.text == '/cancel':
        await state.clear()
        return await admin_panel(message)

    try:
        user_id = int(message.text.strip())

        user_info = user_data.ensure_user(user_id)
        is_already_admin = user_info.get('is_admin', False)

        text = f"""
üîë <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–î–ê–ß–ò –ü–†–ê–í</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>
–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–£–∂–µ –∞–¥–º–∏–Ω' if is_already_admin else '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

{'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞!' if is_already_admin else 'üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø!'}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        await state.update_data(user_id=user_id, is_already_admin=is_already_admin)
        await message.answer(
            text,
            reply_markup=get_confirmation_menu(f"fullaccess_{user_id}"),
            parse_mode='HTML'
        )

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )

@router.callback_query(F.data.startswith("confirm_fullaccess_"))
async def confirm_full_access(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        data = await state.get_data()
        user_id = data['user_id']
        was_admin = data['is_already_admin']

        user_info = user_data.ensure_user(user_id)
        user_info['is_admin'] = True

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        ADMIN_IDS.add(user_id)

        await user_data.save()

        status_text = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã" if was_admin else "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"

        success_text = f"""
‚úÖ <b>–ü–†–ê–í–ê –£–°–ü–ï–®–ù–û {status_text.upper()}</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>
–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>

üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ!
        """

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

        await state.clear()
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {e}')
        await callback.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        await state.clear()

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_users = user_data.data.get('users', {})
        total_users = len(all_users)
        total_games = sum(user.get('games_played', 0) for user in all_users.values())
        total_score = sum(user.get('score', 0) for user in all_users.values())
        active_users = len([u for u in all_users.values() if u.get('games_played', 0) > 0])
        admin_users = len([u for u in all_users.values() if u.get('is_admin', False)])

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –æ—á–∫–∞–º
        top_users = sorted(all_users.items(), key=lambda x: x[1].get('score', 0), reverse=True)[:5]

        top_list = ""
        for i, (uid, data) in enumerate(top_users, 1):
            score = data.get('score', 0)
            games = data.get('games_played', 0)
            top_list += f"{i}. ID: <code>{uid}</code> | {score} –æ—á–∫–æ–≤ | {games} –∏–≥—Ä\n"

        stats_text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>

<b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>
üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>
üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{admin_users}</b>

<b>–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üéØ –í—Å–µ–≥–æ –∏–≥—Ä: <b>{total_games}</b>
üí∞ –û–±—â–∏–π —Å—á–µ—Ç: <b>{total_score}</b>
üìà –°—Ä–µ–¥–Ω–µ–µ –æ—á–∫–æ–≤ –Ω–∞ –∏–≥—Ä–æ–∫–∞: <b>{total_score // max(active_users, 1)}</b>

<b>–¢–û–ü-5 –∏–≥—Ä–æ–∫–æ–≤:</b>
{top_list}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–µ–π—á–∞—Å</i>
        """

        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
        await callback.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

@router.callback_query(F.data == "admin_user_list")
async def show_user_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        all_users = user_data.data.get('users', {})
        active_users = [(uid, data) for uid, data in all_users.items()
                        if data.get('games_played', 0) > 0]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active_users.sort(key=lambda x: x[1].get('score', 0), reverse=True)

        if not active_users:
            text = "üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\nüì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
        else:
            text = f"üë• <b>–°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n–í—Å–µ–≥–æ: <b>{len(active_users)}</b>\n\n"

            for i, (uid, data) in enumerate(active_users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
                score = data.get('score', 0)
                games = data.get('games_played', 0)
                admin_badge = " üîë" if data.get('is_admin', False) else ""
                text += f"{i}. <code>{uid}</code>{admin_badge} | {score} –æ—á–∫–æ–≤ | {games} –∏–≥—Ä\n"

            if len(active_users) > 20:
                text += f"\n<i>... –∏ –µ—â–µ {len(active_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"

        await callback.message.edit_text(
            text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')
        await callback.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

@router.callback_query(F.data == "admin_system_info")
async def show_system_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        import sys
        import psutil
        import platform
        from datetime import datetime

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        python_version = sys.version.split()[0]
        platform_info = platform.platform()

        # –ü–∞–º—è—Ç—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            memory = psutil.virtual_memory()
            memory_info = f"üíæ –ü–∞–º—è—Ç—å: {memory.percent}% ({memory.used // 1024 // 1024} MB)"
        except:
            memory_info = "üíæ –ü–∞–º—è—Ç—å: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        start_time = datetime.now().strftime("%H:%M:%S")

        # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        try:
            data_size = len(str(user_data.data))
            data_info = f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ~{data_size // 1024} KB"
        except:
            data_info = "üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

        system_text = f"""
üîß <b>–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b>
üñ• –°–∏—Å—Ç–µ–º–∞: <code>{platform_info}</code>
üêç Python: <code>{python_version}</code>

<b>–†–µ—Å—É—Ä—Å—ã:</b>
{memory_info}
{data_info}

<b>–°—Ç–∞—Ç—É—Å:</b>
‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
üïê –ü—Ä–æ–≤–µ—Ä–∫–∞: {start_time}

<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>
{', '.join(f'<code>{admin_id}</code>' for admin_id in ADMIN_IDS)}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Å–µ–π—á–∞—Å</i>
        """

        await callback.message.edit_text(
            system_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}')
        await callback.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )

@router.callback_query(F.data == "admin_close")
async def close_admin_panel(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞</b>\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
@router.message(F.text == '/cancel', IsAdmin())
async def cancel_admin_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await admin_panel(message)

# –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.message(IsAdmin(), F.text.startswith('/grant'))
async def old_grant_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã /grant —Å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    await message.answer(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        "–ö–æ–º–∞–Ω–¥–∞: /admin",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
        ])
    )

@router.message(IsAdmin(), F.text.startswith('/reset'))
async def old_reset_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã /reset —Å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    await message.answer(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        "–ö–æ–º–∞–Ω–¥–∞: /admin",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
        ])
    )

@router.message(IsAdmin(), F.text.startswith('/fullaccess'))
async def old_fullaccess_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã /fullaccess —Å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π –Ω–∞ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    await message.answer(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        "–ö–æ–º–∞–Ω–¥–∞: /admin",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_menu")]
        ])
    )