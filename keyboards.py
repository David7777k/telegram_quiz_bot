from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Tuple, Optional

class KeyboardBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def make_keyboard(layout: List[List[Tuple[str, str]]], **kwargs) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –º–∞–∫–µ—Ç–∞"""
        builder = InlineKeyboardBuilder()

        for row in layout:
            buttons = []
            for text, callback_data in row:
                buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))
            builder.row(*buttons)

        return builder.as_markup(**kwargs)

    @staticmethod
    def make_inline_keyboard(buttons: List[List[dict]], **kwargs) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π"""
        builder = InlineKeyboardBuilder()

        for row in buttons:
            row_buttons = []
            for btn in row:
                if 'url' in btn:
                    button = InlineKeyboardButton(text=btn['text'], url=btn['url'])
                else:
                    button = InlineKeyboardButton(text=btn['text'], callback_data=btn['callback_data'])
                row_buttons.append(button)
            builder.row(*row_buttons)

        return builder.as_markup(**kwargs)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", "quiz"), ("üé≤ –ò–≥—Ä—ã", "games")],
        [("üß© –ó–∞–≥–∞–¥–∫–∏", "riddles"), ("üî§ –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", "word")],
        [("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"), ("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "achievements")],
        [("üë• –†–µ–π—Ç–∏–Ω–≥", "leaderboard"), ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")]
    ])

# –ú–µ–Ω—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def quiz_menu() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üü¢ –õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "quiz:easy"), ("üü° –°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "quiz:medium")],
        [("üî¥ –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "quiz:hard"), ("üéØ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "quiz:random")],
        [("üèÉ‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", "quiz:speed"), ("üé™ –°–º–µ—à–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", "quiz:mixed")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ú–µ–Ω—é –∏–≥—Ä
def games_menu() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üé≤ –ö—É–±–∏–∫", "game:dice"), ("ü™ô –ú–æ–Ω–µ—Ç–∞", "game:coin")],
        [("üé∞ –†—É–ª–µ—Ç–∫–∞", "game:roulette"), ("üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "game:number")],
        [("üéÆ –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", "game:rps"), ("üé≤ –î–≤–∞ –∫—É–±–∏–∫–∞", "game:double_dice")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ú–µ–Ω—é –∑–∞–≥–∞–¥–æ–∫
def riddles_menu() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üß© –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–∞–¥–∫–∏", "riddles:easy"), ("ü§î –°–ª–æ–∂–Ω—ã–µ –∑–∞–≥–∞–¥–∫–∏", "riddles:hard")],
        [("üé≠ –ó–∞–≥–∞–¥–∫–∏-—à—É—Ç–∫–∏", "riddles:funny"), ("üîç –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–∞–¥–∫–∏", "riddles:logic")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ú–µ–Ω—é —Å–ª–æ–≤
def word_game_menu() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üî§ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞", "word:short"), ("üìù –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞", "word:long")],
        [("üéØ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", "word:random"), ("üèÜ –¢–æ–ø —Å–ª–æ–≤–∞", "word:hard")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def settings_menu() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üîä –ó–≤—É–∫–∏", "settings:sounds"), ("üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º", "settings:night")],
        [("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "settings:reset"), ("üóÉÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "settings:export")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirm_keyboard(action: str) -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("‚úÖ –î–∞", f"confirm:{action}"), ("‚ùå –ù–µ—Ç", f"cancel:{action}")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
def pagination_keyboard(current_page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{prefix}:page:{current_page-1}"))

    nav_buttons.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="noop"))

    if current_page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{prefix}:page:{current_page+1}"))

    if nav_buttons:
        builder.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))

    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
def rps_keyboard() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üóø –ö–∞–º–µ–Ω—å", "rps:rock"), ("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", "rps:scissors"), ("üìÑ –ë—É–º–∞–≥–∞", "rps:paper")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "games")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def difficulty_keyboard(game_type: str) -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üü¢ –õ–µ–≥–∫–æ", f"{game_type}:easy"), ("üü° –°—Ä–µ–¥–Ω–µ", f"{game_type}:medium")],
        [("üî¥ –°–ª–æ–∂–Ω–æ", f"{game_type}:hard")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stats_keyboard() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats:detailed"), ("üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "achievements")],
        [("üë• –°—Ä–∞–≤–Ω–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏", "stats:compare"), ("üìä –ì—Ä–∞—Ñ–∏–∫–∏", "stats:charts")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏
def help_keyboard() -> InlineKeyboardMarkup:
    return KeyboardBuilder.make_keyboard([
        [("‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å", "help:how_to_play"), ("üéØ –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤", "help:scoring")],
        [("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "help:achievements"), ("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã", "help:commands")],
        [("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "help:support"), ("‚ÑπÔ∏è –û –±–æ—Ç–µ", "help:about")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main")]
    ])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def back_button(callback_data: str = "back_to_main") -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    return KeyboardBuilder.make_keyboard([
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data)]
    ])

def yes_no_keyboard(yes_callback: str, no_callback: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    return KeyboardBuilder.make_keyboard([
        [("‚úÖ –î–∞", yes_callback), ("‚ùå –ù–µ—Ç", no_callback)]
    ])

def menu_with_back(items: List[Tuple[str, str]], back_callback: str = "back_to_main") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    layout = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(items), 2):
        row = items[i:i+2]
        layout.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    layout.append([("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", back_callback)])

    return KeyboardBuilder.make_keyboard(layout)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å URL –∫–Ω–æ–ø–∫–∞–º–∏
def url_keyboard(buttons: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å URL –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard_buttons = []
    for text, url in buttons:
        keyboard_buttons.append([{'text': text, 'url': url}])

    return KeyboardBuilder.make_inline_keyboard(keyboard_buttons)